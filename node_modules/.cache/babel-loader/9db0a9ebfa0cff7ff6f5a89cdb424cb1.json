{"ast":null,"code":"/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\nfunction getDefaults() {\n  return {\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n/**\n * Helpers\n */\n\n\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = /[&<>\"']/g;\nconst escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nconst escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\nconst getEscapeReplacement = ch => escapeReplacements[ch];\n\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n\n    try {\n      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();\n    } catch (e) {\n      return null;\n    }\n\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = {\n  exec: function noopTest() {}\n};\n\nfunction merge(obj) {\n  let i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n    let escaped = false,\n        curr = offset;\n\n    while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n\n    if (escaped) {\n      // odd number of slashes means | is escaped\n      // so we leave it alone\n      return '|';\n    } else {\n      // add space before unescaped |\n      return ' |';\n    }\n  }),\n        cells = row.split(/ \\|/);\n  let i = 0; // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n\n  return cells;\n} // Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\n\n\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n\n  if (l === 0) {\n    return '';\n  } // Length of suffix matching the invert condition.\n\n\n  let suffLen = 0; // Step left until we fail to match the invert condition.\n\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.substr(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  const l = str.length;\n  let level = 0,\n      i = 0;\n\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n} // copied from https://stackoverflow.com/a/5450113/806777\n\n\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n\n  let result = '';\n\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n\n    count >>= 1;\n    pattern += pattern;\n  }\n\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text, [])\n    };\n    lexer.state.inLink = false;\n    return token;\n  } else {\n    return {\n      type: 'image',\n      raw,\n      href,\n      title,\n      text: escape(text)\n    };\n  }\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n  return text.split('\\n').map(node => {\n    const matchIndentInNode = node.match(/^\\s+/);\n\n    if (matchIndentInNode === null) {\n      return node;\n    }\n\n    const [indentInNode] = matchIndentInNode;\n\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n\n    return node;\n  }).join('\\n');\n}\n/**\n * Tokenizer\n */\n\n\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic ? rtrim(text, '\\n') : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim() : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n\n    if (cap) {\n      let text = cap[2].trim(); // remove trailing #s\n\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text: text,\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n\n    if (cap) {\n      const text = cap[0].replace(/^ *> ?/gm, '');\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens: this.lexer.blockTokens(text, []),\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      } // Get next list item\n\n\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?: [^\\\\n]*)?(?:\\\\n|$))`); // Check if current bullet point can start a new List Item\n\n      while (src) {\n        endEarly = false;\n\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) {\n          // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n        line = cap[2].split('\\n', 1)[0];\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) {\n          // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])`); // Check if following lines should be included in List Item\n\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            line = rawLine; // Re-align to follow commonmark nesting rules\n\n            if (this.options.pedantic) {\n              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            } // End list item if found start of new bullet\n\n\n            if (nextBulletRegex.test(line)) {\n              break;\n            }\n\n            if (line.search(/[^ ]/) >= indent || !line.trim()) {\n              // Dedent if possible\n              itemContents += '\\n' + line.slice(indent);\n            } else if (!blankLine) {\n              // Until blank line, item doesn't need indentation\n              itemContents += '\\n' + line;\n            } else {\n              // Otherwise, improper indentation ends this item\n              break;\n            }\n\n            if (!blankLine && !line.trim()) {\n              // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        } // Check for task list items\n\n\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw: raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n        list.raw += raw;\n      } // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n\n\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n      const l = list.items.length; // Item child tokens handled here at end because we needed to have the final item to trim it first\n\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n        const hasMultipleLineBreaks = spacers.every(t => {\n          const chars = t.raw.split('');\n          let lineBreaks = 0;\n\n          for (const char of chars) {\n            if (char === '\\n') {\n              lineBreaks += 1;\n            }\n\n            if (lineBreaks > 1) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n\n        if (!list.loose && spacers.length && hasMultipleLineBreaks) {\n          // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item\n          list.loose = true;\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n\n      if (this.options.sanitize) {\n        token.type = 'paragraph';\n        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.tokens = [];\n        this.lexer.inline(token.text, token.tokens);\n      }\n\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n\n    if (cap) {\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href: cap[2],\n        title: cap[3]\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => {\n          return {\n            text: c\n          };\n        }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n        let l = item.align.length;\n        let i, j, k, row;\n\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n            return {\n              text: c\n            };\n          });\n        } // parse child tokens inside headers and cells\n        // header child tokens\n\n\n        l = item.header.length;\n\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = [];\n          this.lexer.inlineTokens(item.header[j].text, item.header[j].tokens);\n        } // cell child tokens\n\n\n        l = item.rows.length;\n\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = [];\n            this.lexer.inlineTokens(row[k].text, row[k].tokens);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n\n    if (cap) {\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n\n    if (cap) {\n      const token = {\n        type: 'paragraph',\n        raw: cap[0],\n        text: cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n\n    if (cap) {\n      const token = {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize ? 'text' : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!/>$/.test(trimmedUrl)) {\n          return;\n        } // ending angle bracket cannot be escaped\n\n\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n\n      let href = cap[2];\n      let title = '';\n\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n\n    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n\n      if (!link || !link.href) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc) {\n    let prevChar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return; // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))) {\n      const lLength = match[0].length - 1;\n      let rDelim,\n          rLength,\n          delimTotal = lLength,\n          midDelimTotal = 0;\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0; // Clip maskedSrc to same section of string as src (move to lexer?)\n\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) {\n          // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) {\n          // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n        // Remove extra characters. *a*** -> *a*\n\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal); // Create `em` if smallest delimiter has odd char count. *a***\n\n        if (Math.min(lLength, rLength) % 2) {\n          const text = src.slice(1, lLength + match.index + rLength);\n          return {\n            type: 'em',\n            raw: src.slice(0, lLength + match.index + rLength + 1),\n            text,\n            tokens: this.lexer.inlineTokens(text, [])\n          };\n        } // Create 'strong' if smallest delimiter has even char count. **a***\n\n\n        const text = src.slice(2, lLength + match.index + rLength - 1);\n        return {\n          type: 'strong',\n          raw: src.slice(0, lLength + match.index + rLength + 1),\n          text,\n          tokens: this.lexer.inlineTokens(text, [])\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2], [])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n\n    if (cap) {\n      let text, href;\n\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n\n        text = escape(cap[0]);\n\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n\n    if (cap) {\n      let text;\n\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n}\n/**\n * Block-Level Grammar\n */\n\n\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)( [^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n  + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n  + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n  + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n  + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n  + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n  + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n  + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n  + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n  + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */).replace('bull', block.bullet).getRegex();\nblock.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))').replace('def', '\\\\n+(?=' + block.def.source + ')').getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nblock.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\nblock.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex();\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n  + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n  + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n\n});\nblock.gfm.table = edit(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n.getRegex();\nblock.gfm.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('table', block.gfm.table) // interrupt paragraphs with table\n.replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n  + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  paragraph: edit(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()\n});\n/**\n * Inline-Level Grammar\n */\n\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n  + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n  + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n  + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n  + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n  // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //        () Skip orphan delim inside strong    (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n}; // list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\n\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex(); // sequences em should skip over [title](link), `code`, <html>\n\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\ninline.escapedEmSt = /\\\\\\*|\\\\_/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g').replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g').replace(/punct/g, inline._punctuation).getRegex();\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();\ninline.reflink = edit(inline.reflink).replace('label', inline._label).replace('ref', block._label).getRegex();\ninline.nolink = edit(inline.nolink).replace('ref', block._label).getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', inline._label).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', inline._label).getRegex()\n});\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\ninline.gfm.url = edit(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n});\n/**\n * smartypants text replacement\n */\n\nfunction smartypants(text) {\n  return text // em-dashes\n  .replace(/---/g, '\\u2014') // en-dashes\n  .replace(/--/g, '\\u2013') // opening singles\n  .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018') // closing singles & apostrophes\n  .replace(/'/g, '\\u2019') // opening doubles\n  .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c') // closing doubles\n  .replace(/\"/g, '\\u201d') // ellipses\n  .replace(/\\.{3}/g, '\\u2026');\n}\n/**\n * mangle email addresses\n */\n\n\nfunction mangle(text) {\n  let out = '',\n      i,\n      ch;\n  const l = text.length;\n\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n/**\n * Block Lexer\n */\n\n\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n\n\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n  /**\n   * Static Lex Method\n   */\n\n\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n  /**\n   * Static Lex Inline Method\n   */\n\n\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n  /**\n   * Preprocessing\n   */\n\n\n  lex(src) {\n    src = src.replace(/\\r\\n|\\r/g, '\\n').replace(/\\t/g, '    ');\n    this.blockTokens(src, this.tokens);\n    let next;\n\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n  /**\n   * Lexing\n   */\n\n\n  blockTokens(src) {\n    let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (this.options.pedantic) {\n      src = src.replace(/^ +$/gm, '');\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n\n        return false;\n      })) {\n        continue;\n      } // newline\n\n\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // code\n\n\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.\n\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // fences\n\n\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // heading\n\n\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // hr\n\n\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // blockquote\n\n\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // list\n\n\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // html\n\n\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // def\n\n\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n\n        continue;\n      } // table (gfm)\n\n\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // lheading\n\n\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n\n\n      cutSrc = src;\n\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function (getStartIndex) {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      } // text\n\n\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens) {\n    this.inlineQueue.push({\n      src,\n      tokens\n    });\n  }\n  /**\n   * Lexing/Compiling\n   */\n\n\n  inlineTokens(src) {\n    let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let token, lastToken, cutSrc; // String with links masked to avoid interference with em and strong\n\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar; // Mask out reflinks\n\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    } // Mask out other blocks\n\n\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    } // Mask out escaped em & strong delimiters\n\n\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n\n      keepPrevChar = false; // extensions\n\n      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n\n        return false;\n      })) {\n        continue;\n      } // escape\n\n\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // tag\n\n\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // link\n\n\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // reflink, nolink\n\n\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // em & strong\n\n\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // code\n\n\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // br\n\n\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // del (gfm)\n\n\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // autolink\n\n\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // url (gfm)\n\n\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n\n\n      cutSrc = src;\n\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function (getStartIndex) {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n\n        if (token.raw.slice(-1) !== '_') {\n          // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n\n}\n/**\n * Renderer\n */\n\n\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"' + this.options.langPrefix + escape(lang, true) + '\">' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n  }\n\n  blockquote(quote) {\n    return '<blockquote>\\n' + quote + '</blockquote>\\n';\n  }\n\n  html(html) {\n    return html;\n  }\n\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      return '<h' + level + ' id=\"' + this.options.headerPrefix + slugger.slug(raw) + '\">' + text + '</h' + level + '>\\n';\n    } // ignore IDs\n\n\n    return '<h' + level + '>' + text + '</h' + level + '>\\n';\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n          startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(text) {\n    return '<li>' + text + '</li>\\n';\n  }\n\n  checkbox(checked) {\n    return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\n  }\n\n  paragraph(text) {\n    return '<p>' + text + '</p>\\n';\n  }\n\n  table(header, body) {\n    if (body) body = '<tbody>' + body + '</tbody>';\n    return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n  }\n\n  tablerow(content) {\n    return '<tr>\\n' + content + '</tr>\\n';\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align ? '<' + type + ' align=\"' + flags.align + '\">' : '<' + type + '>';\n    return tag + content + '</' + type + '>\\n';\n  } // span level renderer\n\n\n  strong(text) {\n    return '<strong>' + text + '</strong>';\n  }\n\n  em(text) {\n    return '<em>' + text + '</em>';\n  }\n\n  codespan(text) {\n    return '<code>' + text + '</code>';\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  del(text) {\n    return '<del>' + text + '</del>';\n  }\n\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n    if (href === null) {\n      return text;\n    }\n\n    let out = '<a href=\"' + escape(href) + '\"';\n\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n    if (href === null) {\n      return text;\n    }\n\n    let out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n\n}\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\n\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n\n}\n/**\n * Slugger generates header id\n */\n\n\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  serialize(value) {\n    return value.toLowerCase().trim() // remove html tags\n    .replace(/<[!\\/a-z].*?>/ig, '') // remove unwanted chars\n    .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '').replace(/\\s/g, '-');\n  }\n  /**\n   * Finds the next safe (unique) slug to use\n   */\n\n\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n\n    return slug;\n  }\n  /**\n   * Convert string to unique id\n   * @param {object} options\n   * @param {boolean} options.dryrun Generates the next unique slug without updating the internal accumulator.\n   */\n\n\n  slug(value) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n\n}\n/**\n * Parsing & Compiling\n */\n\n\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n  /**\n   * Static Parse Method\n   */\n\n\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n  /**\n   * Static Parse Inline Method\n   */\n\n\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n  /**\n   * Parse Loop\n   */\n\n\n  parse(tokens) {\n    let top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let out = '',\n        i,\n        j,\n        k,\n        l2,\n        l3,\n        row,\n        cell,\n        header,\n        body,\n        token,\n        ordered,\n        start,\n        loose,\n        itemBody,\n        item,\n        checked,\n        task,\n        checkbox,\n        ret;\n    const l = tokens.length;\n\n    for (i = 0; i < l; i++) {\n      token = tokens[i]; // Run any renderer extensions\n\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space':\n          {\n            continue;\n          }\n\n        case 'hr':\n          {\n            out += this.renderer.hr();\n            continue;\n          }\n\n        case 'heading':\n          {\n            out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\n            continue;\n          }\n\n        case 'code':\n          {\n            out += this.renderer.code(token.text, token.lang, token.escaped);\n            continue;\n          }\n\n        case 'table':\n          {\n            header = ''; // header\n\n            cell = '';\n            l2 = token.header.length;\n\n            for (j = 0; j < l2; j++) {\n              cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {\n                header: true,\n                align: token.align[j]\n              });\n            }\n\n            header += this.renderer.tablerow(cell);\n            body = '';\n            l2 = token.rows.length;\n\n            for (j = 0; j < l2; j++) {\n              row = token.rows[j];\n              cell = '';\n              l3 = row.length;\n\n              for (k = 0; k < l3; k++) {\n                cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {\n                  header: false,\n                  align: token.align[k]\n                });\n              }\n\n              body += this.renderer.tablerow(cell);\n            }\n\n            out += this.renderer.table(header, body);\n            continue;\n          }\n\n        case 'blockquote':\n          {\n            body = this.parse(token.tokens);\n            out += this.renderer.blockquote(body);\n            continue;\n          }\n\n        case 'list':\n          {\n            ordered = token.ordered;\n            start = token.start;\n            loose = token.loose;\n            l2 = token.items.length;\n            body = '';\n\n            for (j = 0; j < l2; j++) {\n              item = token.items[j];\n              checked = item.checked;\n              task = item.task;\n              itemBody = '';\n\n              if (item.task) {\n                checkbox = this.renderer.checkbox(checked);\n\n                if (loose) {\n                  if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                      item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                  } else {\n                    item.tokens.unshift({\n                      type: 'text',\n                      text: checkbox\n                    });\n                  }\n                } else {\n                  itemBody += checkbox;\n                }\n              }\n\n              itemBody += this.parse(item.tokens, loose);\n              body += this.renderer.listitem(itemBody, task, checked);\n            }\n\n            out += this.renderer.list(body, ordered, start);\n            continue;\n          }\n\n        case 'html':\n          {\n            // TODO parse inline content if parameter markdown=1\n            out += this.renderer.html(token.text);\n            continue;\n          }\n\n        case 'paragraph':\n          {\n            out += this.renderer.paragraph(this.parseInline(token.tokens));\n            continue;\n          }\n\n        case 'text':\n          {\n            body = token.tokens ? this.parseInline(token.tokens) : token.text;\n\n            while (i + 1 < l && tokens[i + 1].type === 'text') {\n              token = tokens[++i];\n              body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n            }\n\n            out += top ? this.renderer.paragraph(body) : body;\n            continue;\n          }\n\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n\n            if (this.options.silent) {\n              console.error(errMsg);\n              return;\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n\n    return out;\n  }\n  /**\n   * Parse Inline Tokens\n   */\n\n\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n        i,\n        token,\n        ret;\n    const l = tokens.length;\n\n    for (i = 0; i < l; i++) {\n      token = tokens[i]; // Run any renderer extensions\n\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape':\n          {\n            out += renderer.text(token.text);\n            break;\n          }\n\n        case 'html':\n          {\n            out += renderer.html(token.text);\n            break;\n          }\n\n        case 'link':\n          {\n            out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n            break;\n          }\n\n        case 'image':\n          {\n            out += renderer.image(token.href, token.title, token.text);\n            break;\n          }\n\n        case 'strong':\n          {\n            out += renderer.strong(this.parseInline(token.tokens, renderer));\n            break;\n          }\n\n        case 'em':\n          {\n            out += renderer.em(this.parseInline(token.tokens, renderer));\n            break;\n          }\n\n        case 'codespan':\n          {\n            out += renderer.codespan(token.text);\n            break;\n          }\n\n        case 'br':\n          {\n            out += renderer.br();\n            break;\n          }\n\n        case 'del':\n          {\n            out += renderer.del(this.parseInline(token.tokens, renderer));\n            break;\n          }\n\n        case 'text':\n          {\n            out += renderer.text(token.text);\n            break;\n          }\n\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n\n            if (this.options.silent) {\n              console.error(errMsg);\n              return;\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n\n    return out;\n  }\n\n}\n/**\n * Marked\n */\n\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function (err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n      return err ? callback(err) : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n    if (!tokens.length) return done();\n    let pending = 0;\n    marked.walkTokens(tokens, function (token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function (err, code) {\n            if (err) {\n              return done(err);\n            }\n\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n    }\n\n    throw e;\n  }\n}\n/**\n * Options\n */\n\n\nmarked.options = marked.setOptions = function (opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\nmarked.defaults = defaults;\n/**\n * Use Extension\n */\n\nmarked.use = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const opts = merge({}, ...args);\n  const extensions = marked.defaults.extensions || {\n    renderers: {},\n    childTokens: {}\n  };\n  let hasExtensions;\n  args.forEach(pack => {\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      hasExtensions = true;\n      pack.extensions.forEach(ext => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n\n        if (ext.renderer) {\n          // Renderer extensions\n          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;\n\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function () {\n              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = arguments[_key2];\n              }\n\n              let ret = ext.renderer.apply(this, args);\n\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n\n        if (ext.tokenizer) {\n          // Tokenizer Extensions\n          if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n\n          if (ext.start) {\n            // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n\n        if (ext.childTokens) {\n          // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n    } // ==-- Parse \"overwrite\" extensions --== //\n\n\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop]; // Replace renderer with func to run extension, but fall back if false\n\n        renderer[prop] = function () {\n          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            args[_key3] = arguments[_key3];\n          }\n\n          let ret = pack.renderer[prop].apply(renderer, args);\n\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n\n          return ret;\n        };\n      }\n\n      opts.renderer = renderer;\n    }\n\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop]; // Replace tokenizer with func to run extension, but fall back if false\n\n        tokenizer[prop] = function () {\n          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n            args[_key4] = arguments[_key4];\n          }\n\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n\n          return ret;\n        };\n      }\n\n      opts.tokenizer = tokenizer;\n    } // ==-- Parse WalkTokens extensions --== //\n\n\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n\n      opts.walkTokens = function (token) {\n        pack.walkTokens.call(this, token);\n\n        if (walkTokens) {\n          walkTokens.call(this, token);\n        }\n      };\n    }\n\n    if (hasExtensions) {\n      opts.extensions = extensions;\n    }\n\n    marked.setOptions(opts);\n  });\n};\n/**\n * Run callback for every token\n */\n\n\nmarked.walkTokens = function (tokens, callback) {\n  for (const token of tokens) {\n    callback.call(marked, token);\n\n    switch (token.type) {\n      case 'table':\n        {\n          for (const cell of token.header) {\n            marked.walkTokens(cell.tokens, callback);\n          }\n\n          for (const row of token.rows) {\n            for (const cell of row) {\n              marked.walkTokens(cell.tokens, callback);\n            }\n          }\n\n          break;\n        }\n\n      case 'list':\n        {\n          marked.walkTokens(token.items, callback);\n          break;\n        }\n\n      default:\n        {\n          if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {\n            // Walk any extensions\n            marked.defaults.extensions.childTokens[token.type].forEach(function (childTokens) {\n              marked.walkTokens(token[childTokens], callback);\n            });\n          } else if (token.tokens) {\n            marked.walkTokens(token.tokens, callback);\n          }\n        }\n    }\n  }\n};\n/**\n * Parse Inline\n */\n\n\nmarked.parseInline = function (src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n    }\n\n    throw e;\n  }\n};\n/**\n * Expose\n */\n\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"sources":["F:/ITI/Course ReactJS/markdown-previewer/node_modules/marked/lib/marked.esm.js"],"names":["getDefaults","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartLists","smartypants","tokenizer","walkTokens","xhtml","defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","source","obj","name","val","getRegex","RegExp","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","indexOf","resolveUrl","encodeURI","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","exec","merge","i","target","key","arguments","length","Object","prototype","hasOwnProperty","call","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","trim","shift","pop","splice","push","c","invert","l","suffLen","currChar","substr","findClosingBracket","b","level","checkSanitizeDeprecation","console","warn","repeatString","pattern","result","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","slice","join","Tokenizer","constructor","options","space","src","rules","block","newline","code","codeBlockStyle","fences","lang","heading","trimmed","depth","inline","hr","blockquote","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","trimLeft","search","nextBulletRegex","Math","min","task","checked","trimRight","top","spacers","filter","t","hasMultipleLineBreaks","every","chars","lineBreaks","char","pre","def","tag","table","item","header","align","rows","j","k","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","_escapes","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","_punctuation","blockSkip","escapedEmSt","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","out","charCodeAt","random","toString","Lexer","create","inlineQueue","lex","lexInline","next","lastToken","cutSrc","lastParagraphClipped","some","extTokenizer","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","Renderer","infostring","quote","slugger","slug","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","image","TextRenderer","Slugger","seen","serialize","value","getNextSafeSlug","originalSlug","isDryRun","occurenceAccumulator","dryrun","Parser","textRenderer","parse","parser","parseInline","l2","l3","cell","itemBody","ret","renderers","unshift","marked","callback","done","err","pending","setTimeout","message","setOptions","use","args","opts","childTokens","hasExtensions","pack","ext","prevRenderer","apply","prop","prevTokenizer"],"mappings":"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","sourcesContent":["/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartLists: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = /[&<>\"']/g;\nconst escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nconst escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n  regex = regex.source || regex;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n// Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n// /c*$/ is vulnerable to REDOS.\n// invert: Remove suffix of non-c chars instead. Default falsey.\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.substr(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text, [])\n    };\n    lexer.state.inLink = false;\n    return token;\n  } else {\n    return {\n      type: 'image',\n      raw,\n      href,\n      title,\n      text: escape(text)\n    };\n  }\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim() : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text: text,\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *> ?/gm, '');\n\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens: this.lexer.blockTokens(text, []),\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?: [^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0];\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            line = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(line)) {\n              break;\n            }\n\n            if (line.search(/[^ ]/) >= indent || !line.trim()) { // Dedent if possible\n              itemContents += '\\n' + line.slice(indent);\n            } else if (!blankLine) { // Until blank line, item doesn't need indentation\n              itemContents += '\\n' + line;\n            } else { // Otherwise, improper indentation ends this item\n              break;\n            }\n\n            if (!blankLine && !line.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw: raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n        const hasMultipleLineBreaks = spacers.every(t => {\n          const chars = t.raw.split('');\n          let lineBreaks = 0;\n          for (const char of chars) {\n            if (char === '\\n') {\n              lineBreaks += 1;\n            }\n            if (lineBreaks > 1) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n\n        if (!list.loose && spacers.length && hasMultipleLineBreaks) {\n          // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item\n          list.loose = true;\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        token.type = 'paragraph';\n        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.tokens = [];\n        this.lexer.inline(token.text, token.tokens);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href: cap[2],\n        title: cap[3]\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = [];\n          this.lexer.inlineTokens(item.header[j].text, item.header[j].tokens);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = [];\n            this.lexer.inlineTokens(row[k].text, row[k].tokens);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      const token = {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const token = {\n        type: 'paragraph',\n        raw: cap[0],\n        text: cap[1].charAt(cap[1].length - 1) === '\\n'\n          ? cap[1].slice(0, -1)\n          : cap[1],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      const token = {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: []\n      };\n      this.lexer.inline(token.text, token.tokens);\n      return token;\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link || !link.href) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = src.slice(1, lLength + match.index + rLength);\n          return {\n            type: 'em',\n            raw: src.slice(0, lLength + match.index + rLength + 1),\n            text,\n            tokens: this.lexer.inlineTokens(text, [])\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = src.slice(2, lLength + match.index + rLength - 1);\n        return {\n          type: 'strong',\n          raw: src.slice(0, lLength + match.index + rLength + 1),\n          text,\n          tokens: this.lexer.inlineTokens(text, [])\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2], [])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)( [^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //        () Skip orphan delim inside strong    (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\ninline.escapedEmSt = /\\\\\\*|\\\\_/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\n/**\n * smartypants text replacement\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n')\n      .replace(/\\t/g, '    ');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/^ +$/gm, '');\n    }\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens) {\n    this.inlineQueue.push({ src, tokens });\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang, true)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  blockquote(quote) {\n    return '<blockquote>\\n' + quote + '</blockquote>\\n';\n  }\n\n  html(html) {\n    return html;\n  }\n\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      return '<h'\n        + level\n        + ' id=\"'\n        + this.options.headerPrefix\n        + slugger.slug(raw)\n        + '\">'\n        + text\n        + '</h'\n        + level\n        + '>\\n';\n    }\n    // ignore IDs\n    return '<h' + level + '>' + text + '</h' + level + '>\\n';\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(text) {\n    return '<li>' + text + '</li>\\n';\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  paragraph(text) {\n    return '<p>' + text + '</p>\\n';\n  }\n\n  table(header, body) {\n    if (body) body = '<tbody>' + body + '</tbody>';\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  tablerow(content) {\n    return '<tr>\\n' + content + '</tr>\\n';\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? '<' + type + ' align=\"' + flags.align + '\">'\n      : '<' + type + '>';\n    return tag + content + '</' + type + '>\\n';\n  }\n\n  // span level renderer\n  strong(text) {\n    return '<strong>' + text + '</strong>';\n  }\n\n  em(text) {\n    return '<em>' + text + '</em>';\n  }\n\n  codespan(text) {\n    return '<code>' + text + '</code>';\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  del(text) {\n    return '<del>' + text + '</del>';\n  }\n\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + escape(href) + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} options\n   * @param {boolean} options.dryrun Generates the next unique slug without updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function(err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!tokens.length) return done();\n\n    let pending = 0;\n    marked.walkTokens(tokens, function(token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function(err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const opts = merge({}, ...args);\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n  let hasExtensions;\n\n  args.forEach((pack) => {\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      hasExtensions = true;\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        pack.walkTokens.call(this, token);\n        if (walkTokens) {\n          walkTokens.call(this, token);\n        }\n      };\n    }\n\n    if (hasExtensions) {\n      opts.extensions = extensions;\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  for (const token of tokens) {\n    callback.call(marked, token);\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          marked.walkTokens(cell.tokens, callback);\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            marked.walkTokens(cell.tokens, callback);\n          }\n        }\n        break;\n      }\n      case 'list': {\n        marked.walkTokens(token.items, callback);\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            marked.walkTokens(token[childTokens], callback);\n          });\n        } else if (token.tokens) {\n          marked.walkTokens(token.tokens, callback);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Parse Inline\n */\nmarked.parseInline = function(src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n"]},"metadata":{},"sourceType":"module"}